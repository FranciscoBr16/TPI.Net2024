@page "/mis_incripciones"
@inject ProtectedSessionStorage ProtectedSessionStore
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

@code {
    private List<CursoParaMostrar> cursosParaMostrar = new List<CursoParaMostrar>();

    protected override async Task OnInitializedAsync()
    {
        

        if (CustomAppContext.Usuario == null)
        {
            NavigationManager.NavigateTo("/login");
        }
        else if (CustomAppContext.Usuario.Rol == "Alumno")
        {
            await ListarCursos();
        }
    }

    public async Task ListarCursos()
    {
        IEnumerable<Curso> cursos = await ApiClients.CursoApiClient.GetCursosDisponiblesAsync(CustomAppContext.Usuario.Legajo);

        cursosParaMostrar.Clear();

        foreach (var curso in cursos)
        {
            var profesor = (await ApiClients.PersonaApiClient.GetProfesoresDelCursoAsync(curso.Id)).FirstOrDefault();
            var materia = await ApiClients.MateriaApiClient.GetAsync(curso.MateriaId);
            var materiaDescripcion = materia?.Nombre ?? "Descripción de la materia no disponible";

            var comision = await ApiClients.ComisionApiClient.GetAsync(curso.ComisionId);
            var comisionDescripcion = comision?.Descripcion ?? "Descripcion de la comision no disponible";

            cursosParaMostrar.Add(new CursoParaMostrar
                {
                    Id = curso.Id,
                    MateriaDescripcion = materiaDescripcion,
                    Fecha_Vencimiento_Inscripcion = curso.Fecha_Vencimiento_Inscripcion,
                    Cupo = curso.Cupo,
                    IdComision = curso.ComisionId,
                    MateriaId = curso.MateriaId,
                    NombreProfesor = profesor != null ? profesor.Nombre + " " + profesor.Apellido : "Profesor no disponible",
                    ComisionDescripcion = comisionDescripcion
                });
        }
    }

    public class CursoParaMostrar
    {
        public int Id { get; set; }
        public string MateriaDescripcion { get; set; }
        public DateTime Fecha_Vencimiento_Inscripcion { get; set; }
        public int Cupo { get; set; }
        public int IdComision { get; set; }
        public int MateriaId { get; set; }
        public string NombreProfesor { get; set; }
        public string ComisionDescripcion { get; set; }
    }
}

@if (CustomAppContext.Usuario != null)
{
    <h3>Inscripciones Disponibles</h3>
    @if (cursosParaMostrar.Count() == 0)
    {
        <h5>No existen cursos para mostrar</h5>
    } else
    {
        
   
    <table class="table">
        <thead>
            <tr>
                <th>Id Curso</th>
                <th>Id Materia</th>
                <th>Materia</th>
                <th>Fecha Vencimiento</th>
                <th>Cupo</th>
                <th>Id Comision</th>
                <th>Comision</th>
                <th>Profesor</th>
                <th>Acción</th>
            </tr>
        </thead>
        <tbody>
              
            @foreach (var curso in cursosParaMostrar)
            {
                <tr>
                    <td>@curso.Id</td>
                    <td>@curso.MateriaId</td>
                    <td>@curso.MateriaDescripcion</td>
                    <td>@curso.Fecha_Vencimiento_Inscripcion</td>
                    <td>@curso.Cupo</td>
                    <td>@curso.IdComision</td>
                    <td>@curso.ComisionDescripcion</td>
                    <td>@curso.NombreProfesor</td>
                    <td><button class="btn btn-secondary" @onclick="() => InscribirseEnCurso(curso.Id)">Inscribirse</button></td>
                </tr>
            }
        </tbody>
    </table>
}}
else
{
    <p>Cargando...</p>
}

@code {
    private async Task InscribirseEnCurso(int cursoId)
    {
        Inscripcion ins = new Inscripcion { AlumnoLegajo = CustomAppContext.Usuario.Legajo, CursoId = cursoId, Fecha = DateTime.Now, Condicion = "Inscripto" };
        await ApiClients.InscripcionApiClient.InscripcionAsync(ins);

        if (CustomAppContext.Usuario.Rol == "Alumno") { await ListarCursos(); //se hace asi por si se quiere implementar al admin
            }
    }
}
